package io.openems.edge.chp.device.api;

import io.openems.common.channel.AccessMode;
import io.openems.common.channel.Unit;
import io.openems.common.types.OpenemsType;
import io.openems.edge.common.channel.Channel;
import io.openems.edge.common.channel.Doc;
import io.openems.edge.common.channel.WriteChannel;
import io.openems.edge.common.component.OpenemsComponent;

public interface ChpBasic extends OpenemsComponent {


    enum ChannelId implements io.openems.edge.common.channel.ChannelId {

        /**
         * Turn the CHP on (true) or off (false).
         * <ul>
         * <li>Type: boolean
         * </ul>
         */

        ON_OFF(Doc.of(OpenemsType.BOOLEAN).accessMode(AccessMode.READ_WRITE)),

        /**
         * Temperature value of the outgoing hot water.
         * <ul>
         * <li>Type: integer
         * <li>Unit: Decimal degrees Celsius
         * </ul>
         */

        FORWARD_TEMP(Doc.of(OpenemsType.INTEGER).unit(Unit.DEZIDEGREE_CELSIUS).accessMode(AccessMode.READ_ONLY)),

        /**
         * Temperature value of the water return flow.
         * <ul>
         * <li>Type: integer
         * <li>Unit: Decimal degrees Celsius
         * </ul>
         */

        REWIND_TEMP(Doc.of(OpenemsType.INTEGER).unit(Unit.DEZIDEGREE_CELSIUS).accessMode(AccessMode.READ_ONLY)),

        /**
         * Electrical power generated by the chp at the moment.
         * <ul>
         * <li>Type: float
         * <li>Unit: kilowatt
         * </ul>
         */

        ELECTRICAL_POWER(Doc.of(OpenemsType.FLOAT).unit(Unit.KILOWATT).accessMode(AccessMode.READ_ONLY)),

        /**
         * Signals an error (true) or no error occuring (false).
         * <ul>
         * <li>Type: boolean
         * </ul>
         */

        ERROR(Doc.of(OpenemsType.BOOLEAN).accessMode(AccessMode.READ_ONLY)),

        /**
         * Signals a warning (true) or no warning occuring (false).
         * <ul>
         * <li>Type: boolean
         * </ul>
         */

        WARNING(Doc.of(OpenemsType.BOOLEAN).accessMode(AccessMode.READ_ONLY)),

        /**
         * Signals that the chp is ready for operation (true) or not (false).
         * <ul>
         * <li>Type: boolean
         * </ul>
         */

        READY(Doc.of(OpenemsType.BOOLEAN).accessMode(AccessMode.READ_ONLY));
        private final Doc doc;


        private ChannelId(Doc doc) {
            this.doc = doc;
        }

        public Doc doc() {
            return this.doc;
        }

    }

    /**
     * Turn the chp on (true) or off (false).
     *
     * @return the Channel
     */

    default WriteChannel<Boolean> setOnOff(){
        return this.channel((ChannelId.ON_OFF));
    }

    /**
     * Get the forward temperature in decimal degrees Celsius.
     *
     * @return the Channel
     */

    default Channel<Integer> getForwardTemp(){
        return this.channel(ChannelId.FORWARD_TEMP);
    }

    /**
     * Get the rewind temperature in decimal degrees Celsius.
     *
     * @return the Channel
     */

    default Channel<Integer> getRewindTemp(){
        return this.channel(ChannelId.REWIND_TEMP);
}

    /**
     * Get the generated electrical power of the chp in kilowatt, returns a float.
     *
     * @return the Channel
     */

    default Channel<Float> getElectricalPower(){
        return this.channel(ChannelId.ELECTRICAL_POWER);
}

    /**
     * Check if an error occurred. False for no error.
     *
     * @return the Channel
     */

    default Channel<Boolean> isError(){
        return this.channel(ChannelId.ERROR);
}

    /**
     * Check if a warning occurred. False for no warning.
     *
     * @return the Channel
     */

    default Channel<Boolean> isWarning(){
        return this.channel(ChannelId.WARNING);
}

    /**
     * Check if the chp is ready for operation. True means ready.
     *
     * @return the Channel
     */

    default Channel<Boolean> isReady(){
        return this.channel(ChannelId.READY);
}

}
